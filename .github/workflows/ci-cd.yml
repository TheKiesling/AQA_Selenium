name: CI/CD Pipeline - Login Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Ejecutar Tests de Selenium
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Instalar dependencias del backend
      working-directory: ./backend
      run: |
        npm install

    - name: Instalar dependencias del frontend
      working-directory: ./frontend
      run: |
        npm install

    - name: Instalar dependencias de tests
      working-directory: ./tests
      run: |
        pip install -r requirements.txt

    - name: Iniciar backend
      working-directory: ./backend
      run: |
        npm start &
        echo $! > backend.pid
        sleep 5

    - name: Verificar backend
      run: |
        curl -f http://localhost:5000/health || exit 1

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm run build

    - name: Instalar servidor HTTP para frontend
      run: |
        npm install -g serve

    - name: Iniciar frontend
      working-directory: ./frontend
      run: |
        serve -s build -l 3000 &
        echo $! > frontend.pid
        sleep 5

    - name: Verificar frontend
      run: |
        curl -f http://localhost:3000 || exit 1

    - name: Ejecutar tests de Selenium
      working-directory: ./tests
      run: |
        pytest test_login.py -v --html=test-report.html --self-contained-html
      continue-on-error: false

    - name: Subir reporte de tests
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: tests/test-report.html

    - name: Detener servicios
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
        fi

    - name: Verificar resultado de tests
      if: failure()
      run: |
        echo "‚ùå Los tests fallaron. El pipeline se detendr√° aqu√≠."
        echo "No se puede avanzar al siguiente entorno debido a errores en las pruebas."
        exit 1

  deploy-staging:
    name: Deploy a Staging
    needs: test
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Simular deploy a staging
      run: |
        echo "‚úÖ Tests pasaron exitosamente"
        echo "üöÄ Desplegando a entorno de STAGING..."
        echo "Entorno: STAGING"
        echo "Timestamp: $(date)"

  deploy-production:
    name: Deploy a Production
    needs: test
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Simular deploy a production
      run: |
        echo "‚úÖ Tests pasaron exitosamente"
        echo "üöÄ Desplegando a entorno de PRODUCTION..."
        echo "Entorno: PRODUCTION"
        echo "Timestamp: $(date)"

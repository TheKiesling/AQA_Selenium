name: CI/CD Pipeline - Login Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Ejecutar Tests de Selenium
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: tests/requirements.txt

    - name: Install Chrome and ChromeDriver
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci || npm install

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci || npm install

    - name: Install test dependencies
      working-directory: ./tests
      run: pip install -r requirements.txt

    - name: Start backend
      working-directory: ./backend
      run: |
        nohup npm start > backend.log 2>&1 &
        echo $! > backend.pid
        sleep 5

    - name: Verify backend is running
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:5000/health; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... attempt $i"
          sleep 2
        done
        curl -f http://localhost:5000/health || (cat backend/backend.log && exit 1)

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Install serve
      run: npm install -g serve

    - name: Start frontend
      working-directory: ./frontend
      run: |
        nohup serve -s build -l 3000 > frontend.log 2>&1 &
        echo $! > frontend.pid
        sleep 5

    - name: Verify frontend is running
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3000; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... attempt $i"
          sleep 2
        done
        curl -f http://localhost:3000 || (cat frontend/frontend.log && exit 1)

    - name: Run Selenium tests
      working-directory: ./tests
      run: |
        pytest test_login.py -v --html=test-report.html --self-contained-html
      continue-on-error: false

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: tests/test-report.html
        retention-days: 30

    - name: Show backend logs if tests failed
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        cat backend/backend.log || echo "No backend logs found"
        echo "=== Frontend Logs ==="
        cat frontend/frontend.log || echo "No frontend logs found"

    - name: Stop services
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) 2>/dev/null || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) 2>/dev/null || true
        fi

    - name: Check test results
      if: failure()
      run: |
        echo "‚ùå Los tests fallaron. El pipeline se detendr√° aqu√≠."
        echo "No se puede avanzar al siguiente entorno debido a errores en las pruebas."
        exit 1

  deploy-staging:
    name: Deploy a Staging
    needs: test
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "‚úÖ Tests pasaron exitosamente"
        echo "üöÄ Desplegando a entorno de STAGING..."
        echo "Entorno: STAGING"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Timestamp: $(date)"

  deploy-production:
    name: Deploy a Production
    needs: test
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "‚úÖ Tests pasaron exitosamente"
        echo "üöÄ Desplegando a entorno de PRODUCTION..."
        echo "Entorno: PRODUCTION"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Timestamp: $(date)"
